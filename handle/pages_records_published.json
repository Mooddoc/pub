<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beach Notebook Learning Portal</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;600&display=swap');

        body, html {
            margin: 0;
            padding: 0;
            font-family: 'Quicksand', sans-serif;
            height: 100%;
        }
        .container {
            display: flex;
            height: 100%;
        }
        .sidebar {
            width: 250px;
            background-color: #00acc1;
            color: white;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .main-content {
            flex-grow: 1;
            background-color: #f9e8d4;
            padding: 20px;
            overflow-y: auto;
        }
        .menu-button {
            background-color: #ff7f50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            align-self: flex-start;
            margin-bottom: 10px;
        }
        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 24px;
            font-weight: bold;
        }
        .palm-tree {
            width: 30px;
            height: 30px;
        }
        .filters {
            margin-top: 10px;
            background-color: #00acc1;
            padding: 5px;
            border-radius: 5px;
        }
        .filters select {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: none;
            border-radius: 5px;
            background-color: #ff7f50;
            color: white;
            font-size: 20px;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='white' d='M10.293 3.293L6 7.586 1.707 3.293A1 1 0 00.293 4.707l5 5a1 1 0 001.414 0l5-5a1 1 0 10-1.414-1.414z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 10px center;
        }
        .filters select:last-child {
            margin-bottom: 0;
        }
        .filters select:focus {
            outline: none;
        }
        .filters select option {
            background-color: #00acc1;
            color: white;
            padding: 10px;
        }
        .filters select option:checked {
            background-color: #00acc1;
        }
        .filters select option:hover {
            background-color: #ffd54f;
        }
        .content-card {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .content-title {
            color: #ff7f50;
            border-bottom: 2px solid #ff7f50;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        #contentList {
            list-style-type: none;
            padding: 0;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .card {
            background-color: #ffefdc;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card-content {
            padding: 15px;
        }
        .card-title {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 8px;
            color: #ffffff;
        }
        .card-info {
            font-size: 14px;
            margin-bottom: 4px;
            color: #333;
        }
        .card-description {
            font-size: 14px;
            margin-top: 10px;
            color: #333;
        }
        .card-button {
            display: inline-block;
            padding: 6px 12px;
            text-decoration: none;
            border-radius: 4px;
            font-weight: bold;
            font-size: 14px;
            margin-top: 10px;
            transition: background-color 0.3s ease;
        }
        .button-orange { background-color: #ff7f50; color: white; }
        .button-orange:hover { background-color: #ff8c00; }

        .card-split {
            display: grid;
            grid-template-columns: 45% 55%;
        }
        .card-split .card-content:first-child {
            background-color: #00acc1;
        }
    </style>
</head>
<body>
    <div class="container">
       <div class="sidebar">
            <button class="menu-button">‚â° Menu</button>
            <div class="logo">
                üèñÔ∏è EZ Portal
            </div>
            <div class="palm-tree">üå¥</div>
            <div class="filters">
                <select id="categoryFilter" onchange="filterContent()">
                    <option value="all">All Categories</option>
                </select>
                <select id="sectionFilter" onchange="filterContent()">
                    <option value="all">All Sections</option>
                </select>
                <select id="gradeFilter" onchange="filterContent()">
                    <option value="all">All Grades</option>
                </select>
            </div>
        </div>
        <div class="main-content">
             <div class="content-card">
                <h2 class="content-title">Surf Through Topics</h2>
                <div id="contentList">
                    <!-- Cards will be dynamically inserted here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Function to create a card
        function createCard(data) {
            return `
                <div class="card card-split">
                    <div class="card-content">
                        <h2 class="card-title">${data.page_name_eng}</h2>
                        <p class="card-info">Category: ${data.category_name}</p>
                        <p class="card-info">Section: ${data.section_name}</p>
                        <p class="card-info">Grade: ${data.subject_level_name_eng}</p>
                    </div>
                    <div class="card-content">
                        <p class="card-description">${data.skill_description}</p>
                        <a href="${data.Portal_URL_Path}" class="card-button button-orange">Open</a>
                    </div>
                </div>
            `;
        }

        // Function to populate cards
        function populateCards(data) {
            const contentList = document.getElementById('contentList');
            contentList.innerHTML = '';
            data.forEach(item => {
                const cardData = {};
                for (let i = 0; i < item.fields.length; i += 2) {
                    cardData[item.fields[i]] = item.fields[i + 1];
                }
                contentList.innerHTML += createCard(cardData);
            });
            updateFilters();
        }

        // Function to update filter options based on visible cards
        function updateFilters() {
            const categoryFilter = document.getElementById('categoryFilter');
            const sectionFilter = document.getElementById('sectionFilter');
            const gradeFilter = document.getElementById('gradeFilter');
            const visibleCards = Array.from(document.querySelectorAll('.card')).filter(card => card.style.display !== 'none');

            const categories = new Set();
            const sections = new Set();
            const grades = new Set();

            visibleCards.forEach(card => {
                categories.add(card.querySelector('.card-info:nth-child(1)').textContent.split(': ')[1]);
                sections.add(card.querySelector('.card-info:nth-child(2)').textContent.split(': ')[1]);
                grades.add(card.querySelector('.card-info:nth-child(3)').textContent.split(': ')[1]);
            });

            updateFilterOptions(categoryFilter, categories);
            updateFilterOptions(sectionFilter, sections);
            updateFilterOptions(gradeFilter, grades);
        }

        // Helper function to update options for a specific filter
        function updateFilterOptions(filter, options) {
            const currentValue = filter.value;
            filter.innerHTML = '<option value="all">All ' + filter.id.replace('Filter', 's') + '</option>';
            [...options].sort().forEach(option => {
                const optionElement = document.createElement('option');
                optionElement.value = option.toLowerCase();
                optionElement.textContent = option;
                filter.appendChild(optionElement);
            });
            filter.value = currentValue;
        }

        // Function to filter content
        function filterContent() {
            const category = document.getElementById('categoryFilter').value;
            const section = document.getElementById('sectionFilter').value;
            const grade = document.getElementById('gradeFilter').value;
            const cards = document.querySelectorAll('.card');

            cards.forEach(card => {
                const cardCategory = card.querySelector('.card-info:nth-child(1)').textContent.split(': ')[1].toLowerCase();
                const cardSection = card.querySelector('.card-info:nth-child(2)').textContent.split(': ')[1].toLowerCase();
                const cardGrade = card.querySelector('.card-info:nth-child(3)').textContent.split(': ')[1].toLowerCase();

                if ((category === 'all' || cardCategory === category) &&
                    (section === 'all' || cardSection === section) &&
                    (grade === 'all' || cardGrade === grade)) {
                    card.style.display = 'grid';
                } else {
                    card.style.display = 'none';
                }
            });

            updateFilters();
        }

        // Fetch and process JSON data
        fetch('pages_records_published.json')
            .then(response => response.json())
            .then(data => {
                populateCards(data);
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('contentList').innerHTML = '<p>Error loading data. Please try again later.</p>';
            });

        // Load data when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            fetch('pages_records_published.json')
                .then(response => response.json())
                .then(data => {
                    populateCards(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('contentList').innerHTML = '<p>Error loading data. Please try again later.</p>';
                });
        });
    </script>
</body>
</html>
